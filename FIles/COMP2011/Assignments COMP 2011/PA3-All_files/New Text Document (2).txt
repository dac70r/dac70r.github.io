if(heroStatus.alive == true)
    {
        switch(move){
        case 'd':
        if(heroStatus.x + 1 < width -1 || heroStatus.x+1 == width -1){

            heroStatus.x = heroStatus.x + 1;
            ///if cell is empty
            if(map[heroStatus.y][heroStatus.x]==nullptr){
                addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);
                removeThing(map,width,height,heroStatus.x-1,heroStatus.y,HERO,1);
            }

            else
            {
                if(map[heroStatus.y][heroStatus.x] != nullptr){
                    deleteLinkedList(map[heroStatus.y-1][heroStatus.x]);
                    Node* head = map[heroStatus.y][heroStatus.x];
                    Node* temp = head;

                    if(ll_search(temp,MACE) != nullptr){
                        heroStatus.maceCount = heroStatus.maceCount + ll_search(temp,MACE)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,MACE,ll_search(temp,MACE)->quantity);
                    }

                    if(ll_search(temp,DAGGER) != nullptr){
                        heroStatus.daggerCount = heroStatus.daggerCount + ll_search(temp,DAGGER)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,DAGGER,ll_search(temp,DAGGER)->quantity);
                    }

                    if(ll_search(temp,SWORD) != nullptr){
                        heroStatus.swordCount = heroStatus.swordCount + ll_search(temp,SWORD)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,SWORD,ll_search(temp,SWORD)->quantity);
                    }

                    //if move into a cell with monsters

                    if(ll_search(temp,VAMPIRE) != nullptr){
                        if(heroStatus.daggerCount > ll_search(temp,VAMPIRE)->quantity || heroStatus.daggerCount == ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.daggerCount = heroStatus.daggerCount - ll_search(temp,VAMPIRE)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,VAMPIRE,ll_search(temp,VAMPIRE)->quantity);
                        }

                        if(heroStatus.daggerCount < ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,SKELETON) != nullptr){
                        if(heroStatus.maceCount > ll_search(temp,SKELETON)->quantity || heroStatus.maceCount == ll_search(temp,SKELETON)->quantity){
                            heroStatus.maceCount = heroStatus.maceCount - ll_search(temp,SKELETON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,SKELETON,ll_search(temp,SKELETON)->quantity);
                        }

                        if(heroStatus.maceCount < ll_search(temp,SKELETON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,DRAGON) != nullptr){
                        if(heroStatus.swordCount > ll_search(temp,DRAGON)->quantity || heroStatus.swordCount == ll_search(temp,DRAGON)->quantity){
                            heroStatus.swordCount = heroStatus.swordCount - ll_search(temp,DRAGON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,DRAGON,ll_search(temp,DRAGON)->quantity);
                        }

                        if(heroStatus.swordCount < ll_search(temp,DRAGON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);

                    
                }
            }

            return true;

        }
        break;

        case 'a':
        if(heroStatus.x - 1 > 0 || heroStatus.x-1 == 0){
            heroStatus.x = heroStatus.x - 1;
            //if cell is empty
            if(map[heroStatus.y][heroStatus.x]==nullptr){
                addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);
                removeThing(map,width,height,heroStatus.x+1,heroStatus.y,HERO,1);
            }

            else
            {
                if(map[heroStatus.y][heroStatus.x] != nullptr){
                    removeThing(map,width,height,heroStatus.x+1,heroStatus.y,HERO,1);
                    Node* head = map[heroStatus.y][heroStatus.x];
                    Node* temp = head;

                    if(ll_search(temp,MACE) != nullptr){
                        heroStatus.maceCount = heroStatus.maceCount + ll_search(temp,MACE)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,MACE,ll_search(temp,MACE)->quantity);
                    }

                    if(ll_search(temp,DAGGER) != nullptr){
                        heroStatus.daggerCount = heroStatus.daggerCount + ll_search(temp,DAGGER)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,DAGGER,ll_search(temp,DAGGER)->quantity);
                    }

                    if(ll_search(temp,SWORD) != nullptr){
                        heroStatus.swordCount = heroStatus.swordCount + ll_search(temp,SWORD)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,SWORD,ll_search(temp,SWORD)->quantity);
                    }

                    //if move into a cell with monsters

                    if(ll_search(temp,VAMPIRE) != nullptr){
                        if(heroStatus.daggerCount > ll_search(temp,VAMPIRE)->quantity || heroStatus.daggerCount == ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.daggerCount = heroStatus.daggerCount - ll_search(temp,VAMPIRE)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,VAMPIRE,ll_search(temp,VAMPIRE)->quantity);
                        }

                        if(heroStatus.daggerCount < ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,SKELETON) != nullptr){
                        if(heroStatus.maceCount > ll_search(temp,SKELETON)->quantity || heroStatus.maceCount == ll_search(temp,SKELETON)->quantity){
                            heroStatus.maceCount = heroStatus.maceCount - ll_search(temp,SKELETON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,SKELETON,ll_search(temp,SKELETON)->quantity);
                        }

                        if(heroStatus.maceCount < ll_search(temp,SKELETON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,DRAGON) != nullptr){
                        if(heroStatus.swordCount > ll_search(temp,DRAGON)->quantity || heroStatus.swordCount == ll_search(temp,DRAGON)->quantity){
                            heroStatus.swordCount = heroStatus.swordCount - ll_search(temp,DRAGON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,DRAGON,ll_search(temp,DRAGON)->quantity);
                        }

                        if(heroStatus.swordCount < ll_search(temp,DRAGON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);

                    
                }
            }

            return true;
        }
        break;

        case 'w':
        if(heroStatus.y -1 > 0 || heroStatus.y -1 == 0 ){
            heroStatus.y = heroStatus.y -1;
            //if cell is empty
            if(map[heroStatus.y][heroStatus.x]==nullptr){
                addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);
                removeThing(map,width,height,heroStatus.x,heroStatus.y+1,HERO,1);
            }

            else
            {
                if(map[heroStatus.y][heroStatus.x] != nullptr){

                    removeThing(map,width,height,heroStatus.x,heroStatus.y+1,HERO,1);
                    Node* head = map[heroStatus.y][heroStatus.x];
                    Node* temp = head;

                    if(ll_search(temp,MACE) != nullptr){
                        heroStatus.maceCount = heroStatus.maceCount + ll_search(temp,MACE)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,MACE,ll_search(temp,MACE)->quantity);
                    }

                    if(ll_search(temp,DAGGER) != nullptr){
                        heroStatus.daggerCount = heroStatus.daggerCount + ll_search(temp,DAGGER)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,DAGGER,ll_search(temp,DAGGER)->quantity);
                    }

                    if(ll_search(temp,SWORD) != nullptr){
                        heroStatus.swordCount = heroStatus.swordCount + ll_search(temp,SWORD)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,SWORD,ll_search(temp,SWORD)->quantity);
                    }
                    
                    //if move into a cell with monsters

                    if(ll_search(temp,VAMPIRE) != nullptr){
                        if(heroStatus.daggerCount > ll_search(temp,VAMPIRE)->quantity || heroStatus.daggerCount == ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.daggerCount = heroStatus.daggerCount - ll_search(temp,VAMPIRE)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,VAMPIRE,ll_search(temp,VAMPIRE)->quantity);
                        }

                        if(heroStatus.daggerCount < ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,SKELETON) != nullptr){
                        if(heroStatus.maceCount > ll_search(temp,SKELETON)->quantity || heroStatus.maceCount == ll_search(temp,SKELETON)->quantity){
                            heroStatus.maceCount = heroStatus.maceCount - ll_search(temp,SKELETON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,SKELETON,ll_search(temp,SKELETON)->quantity);
                        }

                        if(heroStatus.maceCount < ll_search(temp,SKELETON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,DRAGON) != nullptr){
                        if(heroStatus.swordCount > ll_search(temp,DRAGON)->quantity || heroStatus.swordCount == ll_search(temp,DRAGON)->quantity){
                            heroStatus.swordCount = heroStatus.swordCount - ll_search(temp,DRAGON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,DRAGON,ll_search(temp,DRAGON)->quantity);
                        }

                        if(heroStatus.swordCount < ll_search(temp,DRAGON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    

                    addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);



                }
            }
            
            
            return true;
        }
        break;

        case 's':
        if(heroStatus.y + 1 < height -1 || heroStatus.y + 1 == height -1){
            heroStatus.y = heroStatus.y +1 ;
            ///if cell is empty
            if(map[heroStatus.y][heroStatus.x]==nullptr){
                addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);
                removeThing(map,width,height,heroStatus.x,heroStatus.y-1,HERO,1);
            }

            else
            {
                //hero arriving will delete that node(weapons)
                //update the no of items

                if(map[heroStatus.y][heroStatus.x]!=nullptr){
                    removeThing(map,width,height,heroStatus.x,heroStatus.y-1,HERO,1);
                    Node* head = map[heroStatus.y][heroStatus.x];
                    Node* temp = head;

                    if(ll_search(temp,MACE) != nullptr){
                        heroStatus.maceCount = heroStatus.maceCount + ll_search(temp,MACE)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,MACE,ll_search(temp,MACE)->quantity);
                    }

                    if(ll_search(temp,DAGGER) != nullptr){
                        heroStatus.daggerCount = heroStatus.daggerCount + ll_search(temp,DAGGER)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,DAGGER,ll_search(temp,DAGGER)->quantity);
                    }

                    if(ll_search(temp,SWORD) != nullptr){
                        heroStatus.swordCount = heroStatus.swordCount + ll_search(temp,SWORD)->quantity;
                        removeThing(map,width,height,heroStatus.x,heroStatus.y,SWORD,ll_search(temp,SWORD)->quantity);
                    }

                    ///if move into a cell with monsters

                    if(ll_search(temp,VAMPIRE) != nullptr){
                        if(heroStatus.daggerCount > ll_search(temp,VAMPIRE)->quantity || heroStatus.daggerCount == ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.daggerCount = heroStatus.daggerCount - ll_search(temp,VAMPIRE)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,VAMPIRE,ll_search(temp,VAMPIRE)->quantity);
                        }
                        if(heroStatus.daggerCount < ll_search(temp,VAMPIRE)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,SKELETON) != nullptr){
                        if(heroStatus.maceCount > ll_search(temp,SKELETON)->quantity || heroStatus.maceCount == ll_search(temp,SKELETON)->quantity){
                            heroStatus.maceCount = heroStatus.maceCount - ll_search(temp,SKELETON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,SKELETON,ll_search(temp,SKELETON)->quantity);
                        }
                        if(heroStatus.maceCount < ll_search(temp,SKELETON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    if(ll_search(temp,DRAGON) != nullptr){
                        if(heroStatus.swordCount > ll_search(temp,DRAGON)->quantity || heroStatus.swordCount == ll_search(temp,DRAGON)->quantity){
                            heroStatus.swordCount = heroStatus.swordCount - ll_search(temp,DRAGON)->quantity;
                            removeThing(map,width,height,heroStatus.x,heroStatus.y,DRAGON,ll_search(temp,DRAGON)->quantity);
                        }
                        if(heroStatus.swordCount < ll_search(temp,DRAGON)->quantity){
                            heroStatus.alive = false;
                            return true;
                        }

                    }

                    addThing(map,width,height,heroStatus.x,heroStatus.y,HERO,1);

                }
            }
            

            return true;
        }

    }
        
    }

    return false;
  